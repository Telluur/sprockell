{-# LANGUAGE RecordWildCards #-}
import Sprockell.System

prog :: [Instruction]
prog = [

     Const 1 RegA,
     Store RegA (Addr 0),
     Const 2 RegA,
     Store RegA (Addr 1),
     Const 3 RegA,
     Store RegA (Addr 2),
     Const 4 RegA,
     Store RegA (Addr 3),
     Const 3 RegA,
     Store RegA (Addr 4),
     Const 0 RegA,
     Const 0 RegB,
     Compute Add RegA RegB RegB,
     Load (Deref RegB) RegA,
     Write RegA stdio,
     Const 0 RegA,
     Const 1 RegB,
     Compute Add RegA RegB RegB,
     Load (Deref RegB) RegA,
     Write RegA stdio,
     Const 0 RegA,
     Const 2 RegB,
     Compute Add RegA RegB RegB,
     Load (Deref RegB) RegA,
     Write RegA stdio,
     Const 0 RegA,
     Const 3 RegB,
     Compute Add RegA RegB RegB,
     Load (Deref RegB) RegA,
     Write RegA stdio,
     Const 0 RegA,
     Store RegA (Addr 5),
     Load (Addr 4) RegA,
     Const 1 RegB,
     Compute Add RegA RegB RegA,
     Const 2 RegB,
     Compute Div RegA RegB RegA,
     Store RegA (Addr 6),
     Load (Addr 5) RegA,
     Load (Addr 6) RegB,
     Compute Lt RegA RegB RegA,
     Branch RegA (Rel (2)),
     Jump (Rel (28)),
     Const 0 RegA,
     Load (Addr 5) RegB,
     Compute Add RegA RegB RegB,
     Load (Deref RegB) RegA,
     Store RegA (Addr 7),
     Load (Addr 4) RegA,
     Load (Addr 5) RegB,
     Compute Sub RegA RegB RegA,
     Const 0 RegB,
     Compute Add RegB RegA RegA,
     Load (Deref RegA) RegB,
     Const 0 RegA,
     Load (Addr 5) RegC,
     Compute Add RegA RegC RegC,
     Store RegB (Deref RegC),
     Load (Addr 4) RegA,
     Load (Addr 5) RegB,
     Compute Sub RegA RegB RegA,
     Const 0 RegB,
     Compute Add RegB RegA RegA,
     Load (Addr 7) RegB,
     Store RegB (Deref RegA),
     Load (Addr 5) RegA,
     Const 1 RegB,
     Compute Add RegA RegB RegA,
     Store RegA (Addr 5),
     Jump (Rel (-31)),
     Const 0 RegA,
     Const 0 RegB,
     Compute Add RegA RegB RegB,
     Load (Deref RegB) RegA,
     Write RegA stdio,
     Const 0 RegA,
     Const 1 RegB,
     Compute Add RegA RegB RegB,
     Load (Deref RegB) RegA,
     Write RegA stdio,
     Const 0 RegA,
     Const 2 RegB,
     Compute Add RegA RegB RegB,
     Load (Deref RegB) RegA,
     Write RegA stdio,
     Const 0 RegA,
     Const 3 RegB,
     Compute Add RegA RegB RegB,
     Load (Deref RegB) RegA,
     Write RegA stdio,
     Nop,
     EndProg
        ]

main :: IO()
main = do
  putStr "###BEGIN###"
  _ <- run 1 prog
  putStr "###END###\n"
  return ()


