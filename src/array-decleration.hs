{-# LANGUAGE RecordWildCards #-}
import Sprockell.System

prog :: [Instruction]
prog = [

     Const 0 RegA,
     Store RegA (Addr 0),
     Const 1 RegA,
     Store RegA (Addr 1),
     Const 0 RegA,
     Const 1 RegB,
     Compute Add RegA RegB RegA,
     Store RegA (Addr 2),
     Const 2 RegA,
     Store RegA (Addr 3),
     Const 0 RegA,
     Const 1 RegB,
     Compute Add RegA RegB RegA,
     Const 2 RegB,
     Const 3 RegC,
     Compute Add RegB RegC RegB,
     Store RegA (Addr 4),
     Store RegB (Addr 5),
     Const 0 RegA,
     Const 1 RegB,
     Compute Add RegA RegB RegA,
     Const 2 RegB,
     Const 3 RegC,
     Compute Add RegB RegC RegB,
     Const 0 RegC,
     Const 10 RegD,
     Compute Add RegC RegD RegC,
     Const 20 RegD,
     Const 30 RegE,
     Compute Add RegD RegE RegD,
     Store RegA (Addr 6),
     Store RegB (Addr 7),
     Store RegC (Addr 8),
     Store RegD (Addr 9),
     Const 0 RegA,
     Store RegA (Addr 10),
     Const 0 RegA,
     Store RegA (Addr 11),
     Const 0 RegA,
     Store RegA (Addr 12),
     Const 0 RegA,
     Store RegA (Addr 13),
     Const 0 RegA,
     Store RegA (Addr 14),
     Const 0 RegA,
     Store RegA (Addr 15),
     Const 0 RegA,
     Store RegA (Addr 16),
     Const 0 RegA,
     Store RegA (Addr 17),
     Const 0 RegA,
     Store RegA (Addr 18),
     Const 0 RegA,
     Store RegA (Addr 19),
     Const 0 RegA,
     Store RegA (Addr 20),
     Const 0 RegA,
     Store RegA (Addr 21),
     Const 0 RegA,
     Store RegA (Addr 22),
     Const 0 RegA,
     Store RegA (Addr 23),
     Const 0 RegA,
     Store RegA (Addr 24),
     Const 0 RegA,
     Store RegA (Addr 25),
     Const 0 RegA,
     Store RegA (Addr 26),
     Const 0 RegA,
     Store RegA (Addr 27),
     Const 0 RegA,
     Store RegA (Addr 28),
     Const 0 RegA,
     Store RegA (Addr 29),
     Const 0 RegA,
     Store RegA (Addr 30),
     Const 0 RegA,
     Const 0 RegB,
     Compute Add RegA RegB RegB,
     Load (Deref RegB) RegA,
     Write RegA stdio,
     Const 2 RegA,
     Const 0 RegB,
     Compute Add RegA RegB RegB,
     Load (Deref RegB) RegA,
     Write RegA stdio,
     Const 4 RegA,
     Const 1 RegB,
     Compute Add RegA RegB RegB,
     Load (Deref RegB) RegA,
     Write RegA stdio,
     Const 6 RegA,
     Const 3 RegB,
     Compute Add RegA RegB RegB,
     Load (Deref RegB) RegA,
     Write RegA stdio,
     Nop,
     EndProg
        ]

main :: IO()
main = do
  putStr "###BEGIN###"
  _ <- run 1 prog
  putStr "###END###\n"
  return ()


